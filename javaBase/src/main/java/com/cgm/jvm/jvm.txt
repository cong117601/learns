一：jvm
   java虚拟机规范，有很多实现方式，比如常用的hotspot; Taobaojvm 等都是对它的一种实现；
   jvm大致包括：类加载器，java核心类库，字节码编译器,JNI即时编译器,执行引擎；

   一个java文件可以编译成.class文件，放到不同的操作系统上都能执行，是因为jvm屏蔽了底层硬件和操作系统的差别，不同的操作系统有不同的实现方式。
   当然字节码文件在jvm上运行，那jvm肯定是需要提供内存管理和一些字节码指令来运作的；

二：class file format
    通过javap打开.class文件可以看到字节码指令集和一些文件信息
    或者通过Idea jclasslib插件 更直观

三：类加载器(loading过程)
     jvm是按需动态加载，使用双亲委派机制
     首先一个class文件需要被load到内存时，假如有自定义ClassLoader会先通过它，如果在自己内存中没有找到，
     那会向上AppClassLoad中检查有没有加载过，如果没有会到Extension中加载有没有加载过，如果没有则到BootStrap中查是否加载过，如果没有会向下加载，直到找到；
    BootStrap: 加载核心lib下的核心包，
    Extension：负责加载jre/lib/拓展包
    App: 负责加载classpath下

    自底向上检查，是否在自己的加载范围和是否加载过
    如果没有加载过，并且不在自己范围，则向下加载；

    处于安全问题和资源问题；

    自定义加载器：extend ClassLoader 重写findClass()

    什么时候类初始化：对类进行反射时
                   初始化子类时，父类先初始化
                   。。。。


一.类加载过程：(0-1-2)
  0:loading 需要了解双亲委派机制和三个类加载器

  1:linking
      1.1.验证:验证字节码文件是否合法cafe babe,是否符合jvm规范
      1.2.准备:静态成员变量赋默认值
      1.3.解析 loadClass（param2）是否进行解析；
         将类、方法、属性等符号引用解析为直接引用；常量池中的符号引用：
  2.初始化
    调用<clinit>,给静态成员变量赋初始值；


  3.实例化 (对象的创建过程 0-1-2-3)
    1.new A() 分配内存空间，给成员变量赋默认值
    2.调用构造方法,赋初始值；

二：对象组成：
   2.1、普通对象：
    对象头 （64bit ->8byte,32bit ->4byte）
    类型指针(开启指针压缩 4byte,不开启 8byte)
    实例数据(注意如果是引用类型，如果开启oops则有4byte指针大小，否则8字节)
    对齐（补充到8的倍数）
   2.2、数组：
     对象头
     类型指针
     数组长度
     数组数据
     对齐

   对象头(markWork)：
     锁标志位2bit 无锁，轻量级锁，重量级锁，GC标记，偏向锁
     hashcode 重写过的hashcode不存在这里;
     GC分代年龄


三：JMM

四、运行时数据区：
    线程私有： 栈，程序计数器（存放指令位置信息），本地方法栈
    线程共享： 堆,
             方法区
               1.7实现是永久区 字符串常量池位于永久区，启动程序是指定大小，FGC不会清理。
               1.8原空间，字符串常量池位于堆，会触发FGC
    直接内存：jvm可以直接访问的内核空间的内存

    栈：
     栈帧：
      局部变量表：维护方法中参数及变量的空间
      操作数栈: 具体操作值的空间
      动态链接：a调用b方法，需要去常量池中找b,那这个连接过程就是动态链接
      方法出口：指的时一个方法调用另一个方法时，在哪个位置结束，已经方法的放回值存放在哪个位置

     这部分就要看懂或查找 懂得一些指令的意思了；


五、垃圾回收
      在jvm内存中没有引用只指向它，那它就是垃圾
    java vs c++
      java: GC处理垃圾，开发效率高，执行效率低
      c++: 手工处理垃圾 ，忘记回收容易内存泄露 开发效率低，执行效率高;

    怎么找到垃圾?
      1.引用计数：有多少引用指向它，它维护了引用的个数，但是它无法解决循环引用问题
      2.根可达算法：从GCroots 开始搜索，搜索不到的是垃圾
                  GCRoots根： 线程栈变量，静态变量，常量池中以及JNI指针，总之程序启动马上要用到的变量；

    找到怎么清除垃圾？常见的清除算法：
      1.标记清除： 从GCRoots上查找到不是垃圾的对象并标记为不可回收，之后再扫描清除剩下的，存在内存碎片问题，当存活对象较多时效率高。
      2.copy:    内存一分为二，把存活对象拷贝到一个区域，之后清除掉另一半区域，会发生对象的移动过程。另外对空间有浪费。适合与存活对象较少的区域。

      3.标记压缩：把存活对象整理到一个区域，之后回收另一个区域。需要移动对象，不会产生碎片和内存减半。

     GC: 堆： -Xms -Xmx
                    分区：
                      新生代(1):  eden(8)、s1(1),s2(1) -Xmn
                      老年代(3):  永久代/元数据
                      新生代存活对象较少，采用copy算法清除
                      老年代存活对象较多（），采用标记清除或标记压缩
                      MinorGC/YGC:年轻代空间耗尽时触发
                      MajorGC/FullGC:老年代无法继续分配空间，对整个堆进行回收

      一个对象来了在内存中怎么分配?
          细节:
            栈上分配：1.线程私有小对象 2.无逃逸（就在某个代码中使用） 3.支持标量替换（使用普通的属性代表一个对象）
            线程本地分配TLAB：小对象 （占用eden 默认1%）,多线程的时候不用竞争eden就可以申请空间，提高效率，
            什么时候进入老年代：
               超过XX:MaxTenuringThreshold指定次数 Parallel Scavenge 15 CMS 6 G1 15
               动态年龄：(e+s1)->s2 超过s2的50% ,把年龄最大的放入Old
            eden
            空间担保：YGC期间，s1或s2区空间不够了，空间担保直接进入老年代
            总结：
              一个对象创建之后 ---->栈上分配---Y--> 分配成功
              否则对象大小是否满足线程本地分配--Y-->在eden分配成功
              否则对象特别大直接进入老年代
              否则还是在eden分配
              是否GC清除---Y-->无了
              否则在s1,s2，之后在垃圾清除，判断年龄，最后清除或者到老年代




      常用的垃圾收集器：
         Serial: 当回收时，所有的工作线程在安全点都停下来（触发STW），单线程回收线程工作,之后工作线程开始工作;
         Parallel Scavenge: 多个回收线程工作；
         Parallel Old：标记整理算法;
         CMS:里程碑，并发垃圾回收，毛病较多；
            1.初始标记：先把GCROOTS根标记出来 较短的STW
            2.并发标记：工作线程和垃圾回收线程一起工作，标记出哪些是垃圾
            3.重新标记：由于在标记过程中还会有一些是垃圾没有标记出来，所以需要重新标记一下 STW
            4.并发清理: 这里也会产生垃圾，成为浮动垃圾，要等下一次回收时 收掉

          CMS缺点：内存碎片：当产生较多的内存碎片时，对象分配过程中如果没有空间分配，那会使用Serial Old做标记压缩，效率很低
                  浮动垃圾：降低触发CMS触发频率 或者设置阈值，让它有足够的空间存放浮动垃圾

          并发标记算法： 三色标记 + Incremental Update
          常见组合：
            Serial+Serial old
            ParNew +CMS
            Parallel Scavenge + Parallel Old
          逻辑分代：
          G1逻辑分代
          ZGC
          其他即逻辑分代和物理分代


       常见垃圾收集器组合参数设定：

          -XX:+UseSerialCG = Serial +Old
          (-XX:+UseParNewGC = ParNew+Serial Old)
          -XX:+UseConcMarkSweepCG = ParNew + CMS+ Serial Old
          -XX:+UseParallelGC = Parallel Scavenge + Parallel Old 1.8默认
          -XX:+UserG1GC =G1
          windows 通过 Java -XX:+PrintCommandLineFlags -version
            java -XX:+PrintFlagsFinal -version |grep

            -XX:+PrintCG(Details)


        调优：
          前置：1.吞吐量： 用户代码时间/（用户代码时间+垃圾回收时间）
               2.响应时间： STW越短，响应时间越小


          cpu100%怎么调优？
            一定有线程占用系统资源
             1.找出哪个进程cpu高（top）
             2.找该进程中的哪个线程cpu高（top -Hp）
             3.导出线程的堆栈信息(jstack)
             4.查找具体哪个方法。(jstack)
          系统内存飙高？
            1.导出堆内存（jmap）
            2.分析（jstat,jvisualvm jprofiler）
          如何监控jvm？ jvisualvm,jstat,arthas









